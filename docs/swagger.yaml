basePath: /api/v1
definitions:
  models.Book:
    properties:
      author:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  models.CreateBookInput:
    properties:
      author:
        type: string
      title:
        type: string
    required:
    - author
    - title
    type: object
  models.UpdateBookInput:
    properties:
      author:
        type: string
      title:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Example server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /auth:
    get:
      consumes:
      - application/json
      description: Get welcome message
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get welcome message, get token before trying this route
      tags:
      - home
  /books:
    get:
      consumes:
      - application/json
      description: Get details of all books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get details of all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book with the input paylod
      parameters:
      - description: Create book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.CreateBookInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateBookInput'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a book with the input paylod
      parameters:
      - description: id of the book
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a book
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Get detail of book with given id
      parameters:
      - description: id of the book
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get detail of book with given id
      tags:
      - books
    patch:
      consumes:
      - application/json
      description: Update a book with the input paylod
      parameters:
      - description: id of the book
        in: path
        name: id
        required: true
        type: string
      - description: Update book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.UpdateBookInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateBookInput'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a book
      tags:
      - books
  /example/multifile:
    post:
      consumes:
      - multipart/form-data
      description: Upload multiple file
      parameters:
      - description: files
        in: formData
        name: files
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Upload multiple file, []file giving error will fix later, single file for now
      tags:
      - file
  /example/token:
    get:
      consumes:
      - application/json
      description: Get token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get token
      tags:
      - token
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
